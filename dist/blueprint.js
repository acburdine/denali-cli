"use strict";
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const path = require("path");
const fs = require("fs");
const child_process_1 = require("child_process");
const command_exists_1 = require("command-exists");
const assert = require("assert");
const chalk = require("chalk");
const walk = require("walk-sync");
const codeshift = require("jscodeshift");
const mkdirp = require("mkdirp");
const rimraf = require("rimraf");
const is_directory_1 = require("is-directory");
const ui_1 = require("./ui");
const find_addons_1 = require("./find-addons");
const command_1 = require("./command");
const createDebug = require("debug");
const tryRequire = require("try-require");
const debug = createDebug('denali-cli:blueprint');
/**
 * The Blueprint class manages generating code from a template, or "blueprint". Blueprints have
 * three main parts:
 *
 * - The `locals()` hook, used to generate data to fill in the the templates
 *
 * - Templates, found under `<blueprint dir>/files`. These files are copied over into the project.
 *   The can contain ERB style interpolation to inject values from the `locals` data. Filenames can
 *   also contain variables, delimited by `__variable__`
 *
 * - The `postInstall()` hook, which runs after the copying operation is finished. This gives the
 *   blueprint a chance to perform additional steps that simple templating can't support (i.e.
 *   install an node module).
 *
 * The code generated by a blueprint can also be removed via the `destroy` command. That command
 * will only remove files that exactly match the what the blueprint generates, so if you modify a
 * file after it was generated, it won't be removed.
 *
 * @module denali-cli
 */
class Blueprint extends command_1.default {
    /**
     * Convenience method for calling `.findBlueprints()` and then `.configureBlueprints()`
     */
    static findAndConfigureBlueprints(yargs, action, projectPkg) {
        let blueprints = this.findBlueprints(projectPkg);
        return this.configureBlueprints(blueprints, yargs, action, projectPkg);
    }
    /**
     * Find all available blueprints
     */
    static findBlueprints(projectPkg) {
        let blueprints = {};
        // Special case denali itself, so it can access it's globally linked blueprints.
        let addons = find_addons_1.default(projectPkg && projectPkg.name !== 'denali');
        debug(`discovering available blueprints from [ ${addons.map((a) => a.pkg.name).join(', ')} ] addons`);
        addons.forEach((addon) => {
            this.discoverBlueprintsForAddon(blueprints, addon.pkg.name, path.join(addon.dir, 'blueprints'));
        });
        return blueprints;
    }
    /**
     * Given a set of blueprints and a yargs instance, given each blueprint the chance to add a
     * command to the yargs instance for itself
     */
    static configureBlueprints(blueprints, yargs, action, projectPkg) {
        // Configure a yargs instance with a command for each one
        lodash_1.forEach(blueprints, (BlueprintClass, name) => {
            try {
                debug(`configuring ${BlueprintClass.blueprintName} blueprint (invocation: "${name}")`);
                yargs = BlueprintClass.configure(name, yargs, projectPkg, action);
            }
            catch (error) {
                ui_1.default.warn(`${name} blueprint failed to configure itself:`);
                ui_1.default.warn(error.stack);
            }
        });
        return yargs;
    }
    /**
     * Given an addon's name and source directory, load all the blueprints that addon may supply
     */
    static discoverBlueprintsForAddon(blueprintsSoFar, addonName, dir) {
        debug(`looking for blueprints in ${dir}`);
        if (!fs.existsSync(dir)) {
            debug(`${dir} does not exist, skipping ...`);
            return {};
        }
        // Load the blueprints
        let Blueprints = fs.readdirSync(dir)
            .filter((dirname) => is_directory_1.sync(path.join(dir, dirname)))
            .reduce((BlueprintsSoFar, dirname) => {
            let BlueprintClass = tryRequire(path.join(dir, dirname));
            assert(BlueprintClass, `Unable to load blueprint from ${path.join(dir, dirname)}`);
            BlueprintClass.addon = addonName;
            BlueprintsSoFar[dirname] = BlueprintClass.default || BlueprintClass;
            return BlueprintsSoFar;
        }, {});
        // Capture the source directory of the blueprint
        lodash_1.forEach(Blueprints, (BlueprintClass, blueprintDir) => {
            BlueprintClass.dir = path.join(dir, blueprintDir);
        });
        // Then use the blueprintName as the invocation name, if provided (otherwise, fallback to the
        // directory name
        Blueprints = lodash_1.mapKeys(Blueprints, (BlueprintClass, blueprintDir) => BlueprintClass.blueprintName || blueprintDir);
        debug(`found ${lodash_1.keys(Blueprints).length} blueprints for ${addonName}: [ ${lodash_1.keys(Blueprints).join(', ')} ]`);
        // Move any already-loaded blueprints with the same name as these new ones under an addon-scoped
        // namespace
        lodash_1.intersection(lodash_1.keys(Blueprints), lodash_1.keys(blueprintsSoFar)).forEach((collidingBlueprintName) => {
            let clobberedBlueprint = blueprintsSoFar[collidingBlueprintName];
            blueprintsSoFar[clobberedBlueprint.addon + ':' + collidingBlueprintName] = clobberedBlueprint;
        });
        // Also create a map with the blueprint names scoped to the addon name
        return lodash_1.assign(blueprintsSoFar, Blueprints);
    }
    /**
     * Customize the subcommands header to indicate that it's a list of blueprints
     */
    static configure(blueprintName, yargs, projectPkg, action) {
        return super.configure(blueprintName, yargs, projectPkg, { action })
            .updateStrings({
            'Commands:': 'Available Blueprints:'
        });
    }
    /**
     * Immediately delegates to either generate or destroy
     */
    run(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (argv.action === 'generate') {
                yield this.generate(argv);
            }
            else {
                yield this.destroy(argv);
            }
        });
    }
    /**
     * Generate the blueprint. Generates the data to interpolate into the templates, then copies the
     * template files over into the project. Finally, runs the postInstall hook.
     */
    generate(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let data = this.locals(argv);
            let dest = process.cwd();
            let renamedFiles = this.constructor.renamedFiles;
            walk(this.templateFiles).forEach((relativepath) => {
                let absolutepath = path.resolve(path.join(this.templateFiles, relativepath));
                if (is_directory_1.sync(absolutepath)) {
                    return null;
                }
                let filenameTemplate = lodash_1.template(relativepath, {
                    interpolate: /__(.+?)__/g,
                    sourceURL: relativepath
                });
                let destRelativepath = filenameTemplate(data);
                let basename = path.basename(destRelativepath);
                if (renamedFiles[basename]) {
                    destRelativepath = path.join(path.dirname(destRelativepath), renamedFiles[basename]);
                }
                let destAbsolutepath = path.join(dest, destRelativepath);
                if (fs.existsSync(destAbsolutepath)) {
                    ui_1.default.info(`${chalk.green('already exists')} ${destRelativepath}`);
                    return;
                }
                let contents = fs.readFileSync(absolutepath, 'utf-8');
                let contentsTemplate = lodash_1.template(contents, {
                    interpolate: /<%=([\s\S]+?)%>/g,
                    sourceURL: relativepath
                });
                mkdirp.sync(path.dirname(destAbsolutepath));
                fs.writeFileSync(destAbsolutepath, contentsTemplate(data));
                ui_1.default.info(`${chalk.green('create')} ${destRelativepath}`);
            });
            if (!argv.skipPostInstall) {
                try {
                    yield this.postInstall(argv);
                }
                catch (e) {
                    ui_1.default.error('postInstall failed:');
                    ui_1.default.error(e.stack || e);
                }
            }
        });
    }
    /**
     * Destroy the blueprint. Generates the data to interpolate into the templates, then deletes any
     * unmodified files that were generated by this blueprint. Then runs the postUninstall hook.
     */
    destroy(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let data = this.locals(argv);
            let dest = process.cwd();
            let filesToDelete = [];
            walk(this.templateFiles).forEach((relativepath) => {
                return filesToDelete.push(path.resolve(path.join(this.templateFiles, relativepath)));
            });
            // Get the absolute paths for the template source file and the dest file
            filesToDelete = filesToDelete.map((absolutepath) => {
                let relativepath = path.relative(this.templateFiles, absolutepath);
                let filenameTemplate = lodash_1.template(relativepath, { interpolate: /__([\S]+)__/g });
                let destRelativepath = filenameTemplate(data);
                let destAbsolutepath = path.join(dest, destRelativepath);
                return { destAbsolutepath, destRelativepath, absolutepath };
                // Ensure that the dest file actually exists
            }).filter(({ destAbsolutepath, destRelativepath, absolutepath }) => {
                if (is_directory_1.sync(absolutepath)) {
                    return false;
                }
                let fileExists = fs.existsSync(destAbsolutepath);
                if (!fileExists) {
                    ui_1.default.info(`${chalk.grey('missing')} ${destRelativepath}`);
                }
                return fileExists;
                // And either hasn't been altered, or the force option is being used, to ensure we don't destroy
                // code
            }).filter(({ destAbsolutepath, absolutepath, destRelativepath }) => {
                let templateSrc = fs.readFileSync(absolutepath, 'utf-8');
                let compiled = lodash_1.template(templateSrc);
                let destFileIsNotDirty = fs.readFileSync(destAbsolutepath, 'utf-8') === compiled(data);
                if (destFileIsNotDirty) {
                    ui_1.default.info(`${chalk.red('destroy')} ${destRelativepath}`);
                }
                else {
                    ui_1.default.info(`${chalk.blue('skipped')} ${destRelativepath}`);
                }
                return destFileIsNotDirty;
            }).map(({ destAbsolutepath }) => {
                return destAbsolutepath;
            });
            filesToDelete.forEach((file) => {
                rimraf.sync(file);
            });
            if (!argv.skipPostUninstall) {
                try {
                    yield this.postUninstall(argv);
                }
                catch (e) {
                    ui_1.default.error('postInstall failed:');
                    ui_1.default.error(e.stack || e);
                }
            }
        });
    }
    /**
     * A hook to generate data to be interpolated into the blueprint's template files.
     */
    locals(argv) {
        return argv;
    }
    /**
     * Runs after the templating step is complete, letting you make additional modifications (i.e.
     * install a node module).
     */
    postInstall(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { });
    }
    /**
     * Runs when `denali destroy` is invoked, after the applicable template files have been removed.
     * You should clean up / reverse any changes made in postInstall(), but only in a way that avoids
     * removing user modifications.
     */
    postUninstall(argv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { });
    }
    /**
     * Returns the path to this blueprints template files directory. Defaults to `files/`.
     */
    get templateFiles() {
        return path.join(this.constructor.dir, 'files');
    }
    /**
     * Adds a route to this package's router.
     */
    addRoute(method, urlPattern, actionPath, ...args) {
        let routesFilepath = path.join(process.cwd(), 'config', 'routes.js');
        let routesSource;
        try {
            routesSource = fs.readFileSync(routesFilepath, 'utf-8');
        }
        catch (e) {
            ui_1.default.warn(`Attempted to add "${method.toUpperCase()} ${urlPattern} -> ${actionPath}" route, but config/routes.js does not exist. Skipping ...`);
            return;
        }
        let j = codeshift;
        let ast = codeshift(routesSource);
        let drawRoutesFunction = ast.find(j.ExportDefaultDeclaration).get().value.declaration;
        let routerArgName = drawRoutesFunction.params[0].name;
        let drawRoutesFunctionBody = j(drawRoutesFunction.body);
        let duplicate = drawRoutesFunctionBody.find(j.ExpressionStatement, {
            expression: {
                callee: {
                    object: { name: routerArgName },
                    property: { name: method }
                },
                arguments: [urlPattern, actionPath].concat(args).map((arg) => {
                    return { value: arg };
                })
            }
        });
        if (duplicate.length > 0) {
            return;
        }
        let routerInvocations = drawRoutesFunctionBody.find(j.ExpressionStatement, {
            expression: {
                callee: {
                    object: { name: routerArgName }
                }
            }
        });
        let lastRouterInvocation = routerInvocations.at(routerInvocations.length - 1);
        let routerMethodExpression = j.memberExpression(j.identifier(routerArgName), j.identifier(method));
        let routerArguments = args.map((arg) => j.stringLiteral(arg));
        let routerMethodInvocation = j.callExpression(routerMethodExpression, routerArguments);
        let newRoute = j.expressionStatement(routerMethodInvocation);
        lastRouterInvocation.insertAfter(newRoute);
        fs.writeFileSync(routesFilepath, ast.toSource({ quote: 'single' }));
    }
    /**
     * Removes a route from this package's router
     */
    removeRoute(method, urlPattern, actionPath, ...args) {
        let routesFilepath = path.join(process.cwd(), 'config', 'routes.js');
        let routesSource;
        try {
            routesSource = fs.readFileSync(routesFilepath, 'utf-8');
        }
        catch (e) {
            ui_1.default.warn(`Attempted to remove "${method.toUpperCase()} ${urlPattern} -> ${actionPath}" route, but config/routes.js does not exist. Skipping ...`);
            return;
        }
        let j = codeshift;
        let ast = codeshift(routesSource);
        let drawRoutesFunction = ast.find(j.ExportDefaultDeclaration).get().value.declaration;
        let routerArgName = drawRoutesFunction.params[0].name;
        let drawRoutesFunctionBody = j(drawRoutesFunction.body);
        drawRoutesFunctionBody.find(j.ExpressionStatement, {
            expression: {
                callee: {
                    object: { name: routerArgName },
                    property: { name: method }
                },
                arguments: [urlPattern, actionPath].concat(args).map((arg) => {
                    return { value: arg };
                })
            }
        }).remove();
        fs.writeFileSync(routesFilepath, ast.toSource());
    }
    /**
     * Add a package to this project, using yarn or npm as appropriate.
     */
    installPackage(pkgName, dev) {
        debug(`installing ${pkgName}`);
        if (this.shouldUseYarn()) {
            child_process_1.execSync(`yarn add ${dev ? '--dev' : ''} ${pkgName}`);
        }
        else {
            child_process_1.execSync(`npm install ${dev ? '-D' : '-S'} ${pkgName}`);
        }
    }
    /**
     * Add multiple packages to this project, using yarn or npm as appropriate.
     */
    installPackages(pkgNames, dev) {
        debug(`installing ${pkgNames.join(', ')}`);
        if (this.shouldUseYarn()) {
            child_process_1.execSync(`yarn add ${dev ? '--dev' : ''} ${pkgNames.join(' ')}`);
        }
        else {
            child_process_1.execSync(`npm install ${dev ? '-D' : '-S'} ${pkgNames.join(' ')}`);
        }
    }
    /**
     * Remove a package from this project, using yarn or npm as appropriate.
     */
    uninstallPackage(pkgName) {
        debug(`uninstalling ${pkgName}`);
        if (this.shouldUseYarn()) {
            child_process_1.execSync(`yarn remove ${pkgName}`);
        }
        else {
            child_process_1.execSync(`npm uninstall -S ${pkgName}`);
        }
    }
    /**
     * Remove multiple packages from this project, using yarn or npm as appropriate.
     */
    uninstallPackages(pkgNames) {
        debug(`uninstalling ${pkgNames.join(', ')}`);
        if (this.shouldUseYarn()) {
            child_process_1.execSync(`yarn remove ${pkgNames.join(' ')}`);
        }
        else {
            child_process_1.execSync(`npm uninstall -S ${pkgNames.join(' ')}`);
        }
    }
    /**
     * Check to see whether this project is using yarn for package management
     */
    shouldUseYarn() {
        return command_exists_1.sync('yarn') && fs.existsSync('yarn.lock');
    }
}
/**
 * Files that should be renamed in all blueprints
 * Can be overriden/extended by individual addons
 */
Blueprint.renamedFiles = {
    gitignore: '.gitignore'
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Blueprint;
//# sourceMappingURL=data:application/json;base64,